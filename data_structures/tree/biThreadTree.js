// 线索二叉树：利用空指针域指向节点的前驱或者后继的二叉树。
/*
	线索二叉树的节点设置了两个域，LTag,RTag来表示节点的左右孩子指针指向的是线索还是其孩子。
	
	在中序线索二叉树上遍历二叉树，虽然钱时间复杂度也是o(n)，但是阐述因子比一般的二叉树的遍历要小，
	且不用设置栈，所以线索二叉树适用于经常遍历或者查找结点在遍历所得的线性序列中的前驱和后继的场景。
 */
const { BinaryTreeNode } = require('./binaryTreeNode.js')
const { defaultCompareFn, getValueType } = require('../../util.js')

const Link = 0 // 表示为指针
const Thread = 1 // 表示为线索，即指向它的前驱或者后继

// 线索二叉树的遍历等方法的算法思路和二叉树的基本一致，不过需要注意的是，节点左右孩子的判断条件，
// 因为除了根节点和最后一个节点，它们的左右还是都是不为null的。只需要更改判断条件和更改其他与此
// 相关的逻辑即可，所以这里只实现线索二叉树特有的一些算法和逻辑。

class BiThreadTree {

}